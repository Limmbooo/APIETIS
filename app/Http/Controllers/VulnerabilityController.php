<?php

namespace App\Http\Controllers;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class VulnerabilityController extends Controller
{
    public function sqlInjection(Request $request)
    {
        // Ambil parameter 'id' dari request
        $userId = $request->input('id');

        // Catat input dari fuzzing untuk debugging
        Log::info("SQL Injection Test Input: " . json_encode($request->all()));

        // Query SQL raw (rentan terhadap SQL Injection)
        $user = DB::select("SELECT * FROM users WHERE id = $userId");

        if ($user) {
            return response()->json($user);
        }

        return response()->json(['error' => 'User not found'], 404);
    }

    public function xss(Request $request)
    {
        // Ambil parameter 'data' dari request
        $input = $request->input('data');

        // Catat input dari fuzzing untuk debugging
        Log::info("XSS Test Input: " . json_encode($request->all()));

        // Tampilkan input langsung (rentan terhadap XSS)
        return response()->json(['message' => "You entered: $input"]);
    }

    public function handle(Request $request, Closure $next)
    {
        Log::info("Fuzzing Request Input: " . json_encode($request->all()));
        return $next($request);
    }

    public function insecureFileUpload(Request $request)
    {
        if ($request->hasFile('file')) {
            // Simpan file tanpa validasi jenis file (rentan)
            $path = $request->file('file')->store('uploads');

            // Catat informasi file yang diunggah
            Log::info("File uploaded: " . $path);

            return response()->json(['path' => $path], 201);
        }

        return response()->json(['error' => 'No file uploaded'], 400);
    }

    public function noAuth()
    {
        // Data sensitif diberikan tanpa autentikasi
        return response()->json(['secret' => 'This is sensitive data.']);
    }

    public function directoryTraversal(Request $request)
    {
        $filename = $request->input('file');

        // Akses langsung ke file tanpa validasi path
        $path = storage_path("app/$filename");

        if (file_exists($path)) {
            return response()->file($path);
        }

        return response()->json(['error' => 'File not found'], 404);
    }
}
